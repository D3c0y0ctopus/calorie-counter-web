{"version":3,"sources":["fonts/mario.ttf","FoodList.js","TotalCalories.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","FoodList","_ref","onFoodSelect","foods","actionHistory","isHighlighted","index","some","action","React","createElement","map","food","key","className","concat","onClick","name","TotalCalories","totalCalories","App","setTotalCalories","useState","setFoods","setActionHistory","useEffect","Papa","parse","process","download","header","complete","result","console","log","data","parsedFoods","calories","parseInt","split","char","foodItem","isNaN","prevHistory","prevTotal","error","handleUndo","length","newHistory","lastAction","pop","handleReset","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.1c703f01.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mario.e0257ee3.ttf\";","import React from 'react';\r\n\r\nfunction FoodList({ onFoodSelect, foods, actionHistory }) {\r\n  const isHighlighted = (index) => {\r\n    return actionHistory.some(action => action.index === index);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {foods.map((food, index) => (\r\n        <div\r\n          key={index}\r\n          className={`food-item ${isHighlighted(index) ? 'selected' : ''}`}\r\n          onClick={() => onFoodSelect(index)}\r\n        >\r\n          {food.name}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FoodList;\r\n","import React from 'react';\r\n\r\nfunction TotalCalories({ totalCalories }) {\r\n  return (\r\n    <div className=\"total-calories-container\">\r\n      <div className=\"total-calories-label\">Total Calories</div>\r\n      <div className=\"total-calories-value\">{totalCalories}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TotalCalories;\r\n","import React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\nimport FoodList from './FoodList';\nimport TotalCalories from './TotalCalories';\nimport './App.css';\nimport './fonts/mario.ttf';\n\nfunction App() {\n  const [totalCalories, setTotalCalories] = useState(0);\n  const [foods, setFoods] = useState([]);\n  const [actionHistory, setActionHistory] = useState([]);\n\n  useEffect(() => {\n    Papa.parse(`${process.env.PUBLIC_URL}/foodData.csv`, {\n      download: true,\n      header: true,\n      complete: (result) => {\n        console.log(result.data); // Log the raw data from CSV to see what's being parsed\n        const parsedFoods = result.data.map(food => {\n          const calories = parseInt(food.calories, 10);\n          console.log(`Parsing: ${food.calories} to ${calories}`); // Log each parse\n          return {\n            name: food.name,\n            calories: calories\n          };\n        });\n        setFoods(parsedFoods);\n      }\n    });\n  }, []);\n\n  \n\n  const handleFoodSelect = (index) => {\n    const foodItem = foods[index];\n    if (foodItem && !isNaN(foodItem.calories)) {\n      setActionHistory(prevHistory => [...prevHistory, { index, calories: foodItem.calories }]);\n      setTotalCalories(prevTotal => prevTotal + foodItem.calories);\n    } else {\n      console.error('Invalid calories value', foodItem);\n    }\n  };\n\n  const handleUndo = () => {\n    if (actionHistory.length > 0) {\n      const newHistory = [...actionHistory];\n      const lastAction = newHistory.pop();\n      setActionHistory(newHistory);\n      setTotalCalories(prevTotal => prevTotal - (lastAction.calories || 0));\n    }\n  };\n\n\n  const handleReset = () => {\n    setActionHistory([]); // Clear the action history\n    setTotalCalories(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"stripes-container\">\n        <div className=\"stripe stripe-1\"></div>\n        <div className=\"stripe stripe-2\"></div>\n        <div className=\"stripe stripe-4\"></div>\n        <div className=\"stripe stripe-5\"></div>\n      </div>\n      <div className=\"title-container\">\n    <h1>\n      Rambo's{' '}\n      <span className=\"animated-title\">\n        {\"Lard-O-Meter\".split('').map((char, index) => (\n          <span key={index} className={`letter-animation letter-${index}`}>\n            {char}\n          </span>\n        ))}\n      </span>\n    </h1>\n  </div>\n      <div className=\"main-content\">\n        <div className=\"content-container\">\n          <div className=\"food-list-container\">\n            <FoodList\n              foods={foods}\n              onFoodSelect={handleFoodSelect}\n              actionHistory={actionHistory}\n            />\n          </div>\n          <div className=\"side-container\">\n            <TotalCalories totalCalories={totalCalories} />\n            <div className=\"buttons-container\">\n              <button className=\"button-95\" onClick={handleUndo}>Undo</button>\n              <button className=\"button-95\" onClick={handleReset}>Reset</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n  \n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}